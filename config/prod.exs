use Mix.Config

# For production, we configure the host to read the PORT
# from the system environment. Therefore, you will need
# to set PORT=80 before running your server.
#
# You should also configure the url host to something
# meaningful, we use this information when generating URLs.
#
# Finally, we also include the path to a manifest
# containing the digested version of static files. This
# manifest is generated by the mix phoenix.digest task
# which you typically run after static files are built.
config :gt, Gt.Endpoint,
  http: [port: {:system, "PORT"}],
  url: [host: "example.com", port: 80],
  cache_static_manifest: "priv/static/manifest.json"

# Configures Elixir's Logger
config :logger,
  backends: [
    {Gt.LoggerFileBackend, :ecto},
    {Gt.LoggerFileBackend, :error},
    {Gt.LoggerFileBackend, :request},
    {Gt.LoggerFileBackend, :phoenix},
    {Gt.LoggerFileBackend, :data_source_rates},
    {Gt.LoggerFileBackend, :data_source_pomadorro},
    {Gt.LoggerFileBackend, :data_source_1gp_request},
    {Gt.LoggerFileBackend, :data_source_1gp},
    {Gt.LoggerFileBackend, :cache_consolidated},
    {Gt.LoggerFileBackend, :cache_stats},
    {Gt.LoggerFileBackend, :cache_vip},
    {Gt.LoggerFileBackend, :payment_check},
    {Gt.LoggerFileBackend, :amqp},
    {Gt.LoggerFileBackend, :wl_rest},
  ]

config :logger, :payment_check,
  path: Path.expand("./logs/payment_check.log"),
  level: :info,
  metadata: [:id, :filename],
  metadata_filter: [channel: :payment_check],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 10}

config :logger, :wl_rest,
  path: Path.expand("./logs/wl_rest.log"),
  level: :info,
  metadata: [:url],
  metadata_filter: [channel: :wl_rest],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 10}

config :logger, :ecto,
  path: Path.expand("./logs/ecto.log"),
  metadata_filter: [application: :ecto],
  rotate: %{period: :date, keep: 10}

config :logger, :amqp,
  path: Path.expand("./logs/amqp.log"),
  level: :info,
  metadata_filter: [channel: :amqp],
  rotate: %{period: :date, keep: 10}

config :logger, :request,
  path: Path.expand("./logs/request.log"),
  metadata: [:request_id],
  metadata_filter: [application: :plug],
  rotate: %{period: :date, keep: 20}

config :logger, :phoenix,
  path: Path.expand("./logs/phoenix.log"),
  metadata_filter: [application: :phoenix],
  rotate: %{period: :date, keep: 20}

config :logger, :error,
  path: Path.expand("./logs/error.log"),
  metadata: [:channel],
  level: :error,
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 30}

config :logger, :data_source_rates,
  path: Path.expand("./logs/data_source/rates.log"),
  level: :info,
  metadata: [:period, :id],
  metadata_filter: [channel: :data_source_rates],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 10}

config :logger, :data_source_pomadorro,
  path: Path.expand("./logs/data_source/pomadorro.log"),
  level: :info,
  metadata: [:period, :subtype, :id],
  metadata_filter: [channel: :data_source_pomadorro],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 10}

config :logger, :data_source_1gp_request,
  path: Path.expand("./logs/data_source/one_gamepay_request.log"),
  level: :info,
  metadata: [:id],
  metadata_filter: [channel: :data_source_1gp_request],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 10}

config :logger, :data_source_1gp,
  path: Path.expand("./logs/data_source/one_gamepay.log"),
  level: :info,
  metadata: [:id],
  metadata_filter: [channel: :data_source_1gp],
  format: "$time [$level] $metadata| $message\n"

config :logger, :cache_consolidated,
  path: Path.expand("./logs/cache/consolidated.log"),
  level: :info,
  metadata: [:period, :id],
  metadata_filter: [channel: :cache_consolidated],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 5}

config :logger, :cache_stats,
  path: Path.expand("./logs/cache/stats.log"),
  level: :info,
  metadata: [:period, :id],
  metadata_filter: [channel: :cache_stats],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 5}

config :logger, :cache_vip,
  path: Path.expand("./logs/cache/vip.log"),
  level: :info,
  metadata: [:period, :id],
  metadata_filter: [channel: :cache_vip],
  format: "$time [$level] $metadata| $message\n",
  rotate: %{period: :date, keep: 5}

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :gt, Gt.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :gt, Gt.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :gt, Gt.Endpoint, server: true
#
# You will also need to set the application root to `.` in order
# for the new static assets to be served after a hot upgrade:
#
#     config :gt, Gt.Endpoint, root: "."

# Finally import the config/prod.secret.exs
# which should be versioned separately.
import_config "prod.secret.exs"
